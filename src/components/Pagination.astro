---
interface Props {
  currentPage: number;
  totalPages: number;
}
const { currentPage, totalPages }: Props = Astro.props;

const maxVisiblePages = 7;
const startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
const pages = Array.from(
  { length: endPage - startPage + 1 },
  (_, i) => startPage + i,
);
---

<article
  class="max-w-2xl mx-auto flex justify-between items-center gap-2 overflow-x-auto px-2 py-4"
>
  <button
    id="previous-button"
    class="w-10 sm:w-12 flex justify-center items-center bg-secondary rounded-full cursor-pointer hover:bg-primary disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 overflow-hidden shrink-0"
    disabled={currentPage === 1}
  >
    <img
      class="p-2 sm:p-3 hover:invert-special"
      src="/assets/chevron_left.svg"
      alt="Flecha izquierda"
    />
  </button>
  <ul
    id="pagination"
    current-page={currentPage}
    total-pages={totalPages}
    class="flex gap-1 sm:gap-2 bg-slate-300 rounded-2xl text-tertiary overflow-hidden px-1 sm:px-2"
  >
    {
      pages.map((pageID) => {
        return (
          <li
            item-id={pageID}
            class={currentPage === pageID ? "page-selected" : ""}
          >
            <a
              class="inline-block page-number px-2 sm:px-4 py-1 sm:py-2 rounded-lg font-semibold hover:text-sky-500 transition-all duration-200 hover:shadow-sky-500 hover:shadow-sm text-sm sm:text-base"
              href={`/${pageID}`}
            >
              {pageID}
            </a>
          </li>
        );
      })
    }
  </ul>
  <button
    id="next-button"
    class="w-10 sm:w-12 flex justify-center items-center bg-secondary rounded-full cursor-pointer hover:bg-primary disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 overflow-hidden shrink-0"
    disabled={currentPage === totalPages}
  >
    <img
      class="p-2 sm:p-3 hover:invert-special"
      src="/assets/chevron_right.svg"
      alt="Flecha derecha"
    />
  </button>
</article>

<style>
  .page-selected {
    color: #fff;
    background-color: var(--color-primary);
    box-shadow: 0 0 7px var(--color-primary);

    &:hover {
      background-color: var(--color-tertiary);
      box-shadow: 0 0 7px var(--color-secondary);
    }
  }

  article {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  article::-webkit-scrollbar {
    display: none;
  }
</style>

<script>
  const pagination = document.getElementById("pagination")! as HTMLUListElement;
  const nextButton = document.getElementById(
    "next-button",
  )! as HTMLButtonElement;
  const previousButton = document.getElementById(
    "previous-button",
  )! as HTMLButtonElement;
  const currentPage = Number(pagination.getAttribute("current-page") || 1);
  const totalPages = Number(pagination.getAttribute("total-pages") || 1);

  function getVisiblePages(currentPage: number, totalPages: number) {
    const isMobile = window.innerWidth < 640;
    const maxVisiblePages = isMobile ? 5 : 7;

    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }

    return Array.from(
      { length: endPage - startPage + 1 },
      (_, i) => startPage + i,
    );
  }

  function navigateToPage(pageNumber: number) {
    if (pageNumber >= 1 && pageNumber <= totalPages) {
      const newPages = getVisiblePages(pageNumber, totalPages);
      updatePagination(newPages);
      window.location.href = `/${pageNumber}`;
    }
  }

  previousButton.addEventListener("click", () => {
    if (currentPage > 1) {
      navigateToPage(currentPage - 1);
    }
  });

  nextButton.addEventListener("click", () => {
    if (currentPage < totalPages) {
      navigateToPage(currentPage + 1);
    }
  });

  document.addEventListener("keydown", (e) => {
    if (e.key === "ArrowLeft" && currentPage > 1) {
      navigateToPage(currentPage - 1);
    } else if (e.key === "ArrowRight" && currentPage < totalPages) {
      navigateToPage(currentPage + 1);
    }
  });

  let resizeTimeout: number;
  window.addEventListener("resize", () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      const newPages = getVisiblePages(currentPage, totalPages);
      updatePagination(newPages);
    }, 250);
  });

  function updatePagination(pages: number[]) {
    const paginationList = pagination;
    paginationList.innerHTML = "";

    pages.forEach((pageID) => {
      const li = document.createElement("li");
      li.setAttribute("item-id", pageID.toString());

      const a = document.createElement("a");
      a.href = `/${pageID}`;
      a.className =
        "inline-block page-number px-2 sm:px-4 py-1 sm:py-2 rounded-lg font-semibold hover:text-sky-500 transition-all duration-200 hover:shadow-sky-500 hover:shadow-sm text-sm sm:text-base";
      a.textContent = pageID.toString();

      if (currentPage === pageID) {
        li.classList.add("page-selected");
      }

      li.appendChild(a);
      paginationList.appendChild(li);
    });
  }

  const initialPages = getVisiblePages(currentPage, totalPages);
  updatePagination(initialPages);
</script>
