---
import type { GetStaticPaths } from "astro";
import CardCharacter from "../components/CardCharacter.astro";
import type { ICharacter } from "../types/character";
import Layout from "../layouts/Layout.astro";
import Search from "../components/Search.astro";
import db from "../db/characters";
import "../styles/global.css";

export const getStaticPaths = (async () => {
  const totalCharacters = await db.get(
    "SELECT COUNT(*) as count FROM characters",
  );
  const itemsPerPage = 21;
  const pages = Math.ceil(totalCharacters.count / itemsPerPage);

  const characters = await Promise.all(
    Array.from({ length: pages }, async (_, i) => {
      const offset = i * itemsPerPage;
      const characters: ICharacter[] = await db.all(
        "SELECT * FROM characters LIMIT ? OFFSET ?",
        itemsPerPage,
        offset,
      );
      return {
        params: {
          id: i + 1,
        },
        props: { characters },
      };
    }),
  );

  return characters;
}) satisfies GetStaticPaths;

const { id } = Astro.params;
const { characters } = Astro.props;
---

<Layout title={`PÃ¡gina ${id}`} pageNumber={Number(id)}>
  <Search />
  <article
    class="grid grid-cols-[repeat(auto-fit,minmax(200px,1fr))] gap-4 mt-4"
  >
    {
      characters.map((character) => {
        const {
          name,
          imagen,
          sexo,
          edad,
          ocupacion,
          clan,
          debut,
          estado,
          naturalezaTipo,
          clasificacion,
          familia,
        } = character;

        return (
          <CardCharacter
            id={id}
            name={name}
            imagen={imagen}
            sexo={sexo}
            edad={edad}
            ocupacion={ocupacion}
            clan={clan}
            debut={debut}
            estado={estado}
            naturalezaTipo={naturalezaTipo}
            clasificacion={clasificacion}
            familia={familia}
          />
        );
      })
    }
  </article>
</Layout>
